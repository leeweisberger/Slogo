

Pair Program: paint slower (with sleep or timer)


Delegation:
Steve: 

1. Access Map: In display we have already passed in model, and so write an getter that get it. 
2. Separate doView from Controller 
3. Figure out dynamically the window size (componentSize)
4. Flag to drawUpdateState (default state is that )
5. Allow multiple workspaces (perhaps as tabs or as separate windows). 
	You can define exactly what a workspace is but, at the very least, 
	it should have a separate turtle display area, command history, and active variables
6. Multiple Turtle Drawing: 
	allow users to toggle whether or not to highlight the currently active turtles in a workspace's display window
		Terrapin Logo v. 3 allows you to make the WHO command visible by having boundary boxes appear around all objects on the TELL list. 
		This can be useful when using multiple turtles or multiple bitmaps so that the objects that are listening to commands are readily apparent.
	http://www.terrapinlogo.com/Version_3_Features.php#five
	
	
Anthony:
		menu bar(functionality remaining)
		buttons

Menu bar 
	Buttons 
	File: import, save, 
	Format: change color, choose turtle image
	Help:

	 | stop | run | undo | clear | 
	**| slow | fast | import  

Turtle Graphics 
	turtle + pen 

Status window	
	position, direction in radians counterclockwise from the horizontal
	error messages
	*error log

Command box 
	
Sample commands 

History 

HTML formatted help page 



****Notes
MenuBar refactored but still doesn't obey open closed principle
determine what methods in the GUI are to be public/ part of the API



enter commands to the turtle interactively
display results of the turtle executing commands
The turtle should be driven via commands entered by the user 
and optionally by buttons or other user controls.
 
You should provide feedback so that the user is always aware 
of the turtle's position, heading, or other parameters affected
by the environment. Note, the turtle starts in the center of the 
display which is considered (0, 0).

display errors that may result from the user's commands

choose an image to use for the turtle

specify a color to use for the pen
show commands previously run in the environment (even better, make these commands directly clickable to execute)
access an HTML formatted help page
it could just be a "language reference", i.e., the command descriptions
given with the assignment, or you could extend it to include features of the GUI

naming the boxes**? 
used MenuLookDemo.java example 
