for constructor, can throw: SecurityException, ClassNotFoundException, NoSuchMethodException
automatic creation of tabs: 
change between tabs = keep track of new history, and clear the current stuff on view.
	Lines.clear()
	canvas.clear()
change the background color: add combo choose in panel: http://docs.oracle.com/javase/tutorial/uiswing/components/combobox.html
change the pen color 
allow user to select different turtle, use this: http://docs.oracle.com/javase/tutorial/uiswing/components/filechooser.html
active variables
Other todos: Language setting

3. Figure out dynamically the window size (componentSize)

	//put in the menu option
        public void actionPerformed (ActionEvent e){
            try{
                myTabbedPane.add("Tab" + adjustedTabCount(), new DisplayTab(X, X))
            }
            catch(Exception e1){
                e1.printStackTraces()
            }
        }
        
        myTabCount ++ for adjustedTabCount
        for closing a tab, getSelectedComponent
        
        clear: set image at origin, clear History, setAngle to original, and myLines.clear(): 
        	myLines is an arrayList, call clear will clear them, and in paintFrame you no longer draw it.
         

Need to create formatted textFields to show information about variables, and such:
http://docs.oracle.com/javase/tutorial/uiswing/components/formattedtextfield.html
Pair Program: paint slower (with sleep or timer)

Delegation:
Steve:  


5. Allow multiple workspaces (perhaps as tabs or as separate windows). 
	You can define exactly what a workspace is but, at the very least, 
	it should have a separate turtle display area, command history, and active variables
6. Multiple Turtle Drawing: 
	allow users to toggle whether or not to highlight the currently active turtles in a workspace's display window
		Terrapin Logo v. 3 allows you to make the WHO command visible by having boundary boxes appear around all objects on the TELL list. 
		This can be useful when using multiple turtles or multiple bitmaps so that the objects that are listening to commands are readily apparent.
	http://www.terrapinlogo.com/Version_3_Features.php#five
	
	
Anthony:
		menu bar(functionality remaining)
		buttons
			run: parse and call draw 
			

Menu bar 
	Buttons 
	File: import, save, 
	Format: change color, choose turtle image
	Help:

Buttons
	 | stop | run | undo | clear | Pen up(connected to fast) / down
	**| slow | fast (radio buttons) | import
	

	 
 

Turtle Graphics 
	turtle + pen 

Status window	
	position, direction in radians counterclockwise from the horizontal
	error messages
	*error log

Command box 
	
Sample commands 

History 

HTML formatted help page 



****Notes
MenuBar refactored but still doesn't obey open closed principle
determine what methods in the GUI are to be public/ part of the API

History button text doesn't wrap**
Specify file name for file to be saved in 
tab hierarchy refactoring 

errors from user input
choose image for turtle 
HTML formatted help page 
*show variables currently available in the environment (even better, make their values directly clickable to edit)
*show user-defined commands currently available in the environment (even better, make these commands directly clickable to execute) 
*allow users to set, save, and load workspace preferences (like default background, starting image list, starting number of turtles, starting file to load, etc.)



