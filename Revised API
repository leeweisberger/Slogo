slogo Revised API Document
=====

Team member Responsibility breakdown:
Lee Weisberger and Shenghan Chen: Back-end
Anthony Olawo and Siyang Wang: Front-end:
	1: Graphic Layout (Olawo and Wang, peer program)
	2: Data I/O (Olawo)
	3: Drawing functionalities (Wang)
	4: Buttons(Olawo)

============
Design Goals:
The team is designing and implementing a flexible GUI program-- SLogo-- whose functionality can be used and/or extended via an API. Like most standard GUI programs SLogo will have a view and model. The view will consist of four modules: a graphic layout module, a 'draw' module, an action listener module and a command history module. The model on the other hand will consist of a parsing module, a command module, and a TurtleState module.

View Modules
The graphic layout module will be a canvas responsible for laying out the windows and buttons that the user will interract with. These include menubar, turtle graphics window, command input bar, command history, as well as button component that is comprised of "run", and "clear" button. To be specific, menubar includes saving and loading of commands, preferences, changing the draw format (such as change pen color, and change background color) and a HTML help page. The commandInput part allows user to type in command, which then pass the String input to backend and start the parsing and analyzing process. The clickable history gets what is typed by the user from commandInput bar, and then append the "latest command" to the end of the history list. The history list is clickable, and when any previous history is clicked, the command is called. The turtle graphics window, as its name suggests, is the graphics window that outputs the result of commands, and draw the update to on the canvas. The following paragraphs discusses the design of each modules in details.   

The draw module's will draw the turtle and trace its movements on the turtle graphics window. Here the team assumed that the module would only ever have to draw a single turtle at a time because all other implementations of logo had a single turtle. That said, it will be designed to allow future developers extend the manner in which the turtle is drawn and its movements traced eg. the type of turtle drawn, the thickness, color and style of the trace etc. Later on we have made changes which allows the multiple window (display). 

The action listener module's primary goal will be to communicate user input from the graphic layout module to the model and then query the turtle module in order to update the graphic layout module. A developer should only need to extend this after they have already extended either the graphical layout module-- which it takes input from to pass to the model-- or the turtle-- which it takes input from to update the view's draw module and command history module.

The command history module will be responsible for keeping track of and displaying the commmands entered in the command window of the graphical layout module. We have combined the command history function with the clickable command history so that each list in history is clickable, and once clicked, particular command will be called. 

Model: 
The parsing module's primary goal will be to take raw input from the view and parse it into commands. The module should be capable of parsing a line at a time or more. Parsing occurs in a few steps:
1. Raw input is parsed into tokens. This is done by the Lexer and its lex() method
2. Tokens are converted into Commands using reflection. This is done by the parser in its getCommandType() method and its makeCommandList() method
3. Commands are converted into nodes in a parse tree. Each command node has children which are the arguments and expressions that the command needs.

The command module will then instantiate the respective commands. This module will need to be flexible since it lexicographs a huge part of the turtle's behaviour and other developers may want to extend this behaviour. Each command is created using its own class. Each command extends a subclass of the Command superclass. Every command implements a doCommand() method which retrieves the command's inputs, does any appropriate calculations, changes the turtle's state if appropriate, and returns the appropriate value.

The TurtleState module will keep track of each of the active turtles' histories. Each turtle keeps track of its own history. The TurtleState keeps track of the turtle's position as well as its pen. Every time a TurtleState is updated, this updated state is added to that turtles' history so that each of the turtles' positions can be drawn by the view. The view uses a map of turtle histories (where the key is the turtle and the value is a list of its histories) to draw the turtle.

============
Primary Classes: 
(front-end)
In View Package:
		CommandHistoryList.java
		CommandInput.java
		Display.java
		DisplayTab.java
		HelpPage.java
		TurtleGraphicsWindow.java
In View.buttons Package:
		SuperButton.java
		ClearButton.java
		HistoryButton.java
		RunButton.java
		Settings.java
In View.menu Package:
		FileMenu.java
		FormatMenu.java
		MenuBar.java
		ParseAndWriteXML.java
		SuperMenu.java
		
The core architecture of the front end includes view part, which are swing components each enclosed in JPanel, that satisfy different functionality requirements. CommandHistoryList is a JList, CommandInput is JTextArea, and TurtleGraphicsWindow is merely another component on which JGEngine runs. Display is a JTabbedPane on which multiple Tab is implemented, and DisplayTab is the place where methods allowed in single tab is written (DisplayTab is instantiated in Display). 

View.buttons packages is pretty reusable and independ on its own. The buttons all implements JButtons, and SuperButton is extended by specifc button with specific functions. 

View.menu package is also reusable and independ on its own. The menubar is implemented using JMenu, and menu of specific kind is implemented using JMenuItem. 

(back-end)		
Model:
Parsing(module):
	Lexer to parse input into tokens
	Parser to transform tokens into Command objects and then into nodes
	
	
Command classes(module): 
	Hierarchy including:
	
		Command superclass that contains more general methods such as getInputs() and setNumberOfInputs(). 			This super class also contains the function that sets the command's inputs from the node of that 		command. This class is abstract
		
		Command subclasses that contain more specific methods depending on the number of inputs a command 			has. These subclasses set the number of inputs that a command takes and have methods that 			specifically deal with commands of certain inputs
		
		Commands that implement a command subclass. Each command implements the doCommand() method. 				doCommand() gets all appropriate inputs, completes calculations, updates the TurtleState, and 			returns the appropriate value
	
	
TurtleState (module)
	
	TurtleState keeps track of each turtle's position and pen status. It contains methods that set the turtle's 	attributes. When a turtle's state is changed, its history is updated. The turtle histories are passed to the 		view so that the turtle's entire path can be drawn.
	
	

Potentially: 
	Mediator design pattern 
		Transform the user inputs to commands -- > place we can detect errors 

Assumptions:
	Passing the command tree once at a time V.S. passing the command trees together once 


Primary Classes and Methods
Describe the program's core architecture (focus on behavior not state), including pictures of a UML diagram to describe the Model and "screen shots" of your intended View interface

The program is generally divided into the Model, the View Interface(GUI), and the Turtle component. The model part is responsible for parsing (by Lexer/Abstract Syntax Tree), storing the user-typed commands, and then calling the command classes in the Model package, which are the sub-classes of a command super class. Each of the command classes individually corresponds to simple syntax with constants used to draw forward, squares, and triangles; simple syntax with variables; loops, loops with variables; procedures, including the ones with variables, and those with recursion. 

Another important component is the Turtle class. It is an independent class that lives between the Model and the Interface. Model calls Turtle once it finishes parsing, and then TurtleGraphics, that extends some GUI tools in the View Interface, calls Turtle. 

The core architecture of the front end includes view part, which are swing components each enclosed in JPanel, that satisfy different functionality requirements. CommandHistoryList is a JList, CommandInput is JTextArea, and TurtleGraphicsWindow is merely another component on which JGEngine runs. Display is a JTabbedPane on which multiple Tab is implemented, and DisplayTab is the place where methods allowed in single tab is written (DisplayTab is instantiated in Display). View.buttons packages is pretty reusable and independ on its own. The buttons all implements JButtons, and SuperButton is extended by specifc button with specific functions. View.menu package is also reusable and independ on its own. The menubar is implemented using JMenu, and menu of specific kind is implemented using JMenuItem. 

The hierchy is described below: everytime backend parses, and calls the corresponding class (doCommand is called), it returns hashMaps, which keep track of finalState, stateHistory, ActiveTurtle, where a single turtleState contains information as x, y, angle, turtleID, PenUporDown, and PenColor. This is then passed to front-end, and specifically to the TurtleGraphicsWindow, where the update is drew, and reflcted on the display. The one caveat, though, is that there are two way commnicatio between frontend and backend, in that front end takes user input/load command/load preference, and then it calls backend parser to start the process of analyzing the command, before the turtleState is passed back again to the backend. 

The View Interface frame is another important component. View Interface laysout the GUI, specifies the responsibility of each component, and is related to each other in the manner described in the primary classes section, just above this. 

Example Code (Forward 50) 
This is pseudo code. It isn't exactly how the code works, but gives a good high level example
###################View Stuff ###################
Model model = new Model();
Display display = new View(model);
display.displayTab.run(input){
	model.updateBackEndAndDraw(input); 
}
updateBackEndandDraw (String typedCommand) {
	myHistoryMap = model.getMyHistoryMap();
	myActiveTurtles = model.getActiveTurtles();
	model.doCommands(typedCommand);
	turtleGraphicsWindow.runBottonAction(myHistoryMap, myActiveTurtles, true);
	historyList.getListModel().addElement(typedCommand);
}
Parser parser = new Parser (input, "english");
Lexer lexer = new Lexer(input);
tokenList = lexer.lex();
commandList = parser.makeCommandList(tokenList);
nodeList = parser.buildTree(commandList);
for(Command command : nodeList.getCommand()){
	command.setInputsFromNode(Node.getChildren);
}
for(int turtle : myActiveTurtles){
	command.doCommand(myHistoryMap.get(turtle));
	myStatesMap.get(turtle).updateHistory();
}
getHistoryMap();


	

There are several alternatives we could take, either to have the parser work in another way, or to make the turtle graphic module look difference.

1.  Now we are calling a command maker throughout the process of parsing; each time we interpret a piece of text, we pass it to the command maker to produce a command; we create a syntax tree maker at the top, and while we are making commands we also pass them to the tree maker so that it's generating a syntax tree for the turtle object to go through and call its methods. Instead, we could call the command maker and the tree maker at the very end, so after all the text is parsed we put all the commands together to generate a syntax tree. We decide not to do so because this might cause the syntax tree to lose certain features about the structure of the program the user codes, as we have to store the decoded parts in a collection for the tree maker to pick up later, but such a collection isn't capable of holding structural information.

2.  We decide to have the turtle object communicate with the turtle graphic module within each method that's invoked on the turtle, which means whenever the turtle takes a move, the view interface should be notified and respond accordingly so as to update its drawing. Instead, we could pass information to the view interface after the turtle finishes all its moves, drawing the result only at the final state of the turtle. Again, we choose not to implement a design like this, because once we do so, users won't be able to keep track of the movement of the turtle, which is essentially an important feature of SLogo, or to pause the drawing while the program is being executed.
